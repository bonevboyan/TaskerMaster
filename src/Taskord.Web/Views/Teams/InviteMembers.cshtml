@using Taskord.Web.Models
@model InviteMembersViewModel

<div class="card">
    <div class="card-horizontal">
        <div class="img-square-wrapper">
            <img class="" src="@Model.Team.ImagePath">
        </div>
        <div class="card-body">
            <h4 class="card-title">Name: @Model.Team.Name</h4>
            <p class="card-text fst-italic">Description: @Model.Team.Description</p>
        </div>
    </div>
</div>

<h2 class="text-center">Add Your Friends to @Model.Team.Name</h2>

<div class="row">
    @foreach (var user in Model.Friends)
    {
        <div class="col-md-4">
            <div class="card mb-3">
                <img class="card-img-top" src="@user.ImagePath">
                <div class="card-body text-center">
                    <h5 class="card-title text-center">@user.Name</h5>
                    @if (user.IsInvited)
                    {
                        <a class="sendInvite btn btn-info" id="@user.Id" hidden>Send Invite</a>
                        <a class="withdrawInvite btn btn-secondary" id="@user.Id">Withdraw</a>
                    }
                    else
                    {
                        <a class="sendInvite btn btn-info" id="@user.Id">Send Invite</a>
                        <a class="withdrawInvite btn btn-secondary" id="@user.Id" style="visibility: hidden;">Withdraw</a>
                    }
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
<script type="module">
    let inviteBtns = document.getElementsByClassName('sendInvite');
    let withdrawBtns = document.getElementsByClassName('withdrawInvite');

    [...withdrawBtns].forEach(x => {
        x.addEventListener('click' , (event) => {
            withdrawInvite(x.id, '@Model.Team.Id');
        });

        async function withdrawInvite(userId, teamId) {
            const response = await fetch('/api/teams/withdrawInvite', {
                method: 'post',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ TeamId: teamId, UserId: userId})
            });

            if (response.ok) {
                x.parentElement.querySelector('.sendInvite').style.visibility = 'visible';
                x.style.visibility = 'hidden'
            }
        }
    });

    [...inviteBtns].forEach(x => {
        x.addEventListener('click' , (event) => {
            sendInvite(x.id);
        });

        async function sendInvite(id) {
            const response = await fetch('/api/teams/inviteMember', {
                method: 'post',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ TeamId: '@Model.Team.Id', UserId: id})
            });

            if (response.ok) {
                x.parentElement.querySelector('.withdrawInvite').style.visibility = 'visible';
                x.style.visibility = 'hidden'
            }
        }
    });
</script>
}