@using Taskord.Data.Models.Enums
@using Taskord.Web.Models
@model InviteMembersViewModel

<partial name="_TeamPartial" model="Model.Team"/>

<h2 class="text-center">Add Your Friends to @Model.Team.Name</h2>

<div class="row">
    @if (Model.Friends.Any())
    {
        @foreach (var user in Model.Friends)
        {
            <div class="col-md-4">
                <div class="card mb-3">
                    <img class="card-img-top" src="@user.ImagePath" onerror="this.onerror=null; this.src='https://freepikpsd.com/file/2019/10/default-profile-picture-png-1-Transparent-Images.png'">
                    <div class="card-body text-center">
                        <h5 class="card-title text-center">@user.Name</h5>
                        @if (user.State == RelationshipState.Withdrawn)
                        {
                            <button class="sendInvite btn btn-info" id="@user.Id" >Send Invite</button>
                            <button class="withdrawInvite btn btn-secondary" id="@user.Id" disabled>Withdraw</button>
                        }
                        else
                        {
                            <button class="sendInvite btn btn-info" id="@user.Id" disabled>Send Invite</button>
                            <button class="withdrawInvite btn btn-secondary" id="@user.Id" >Withdraw</button>
                        }
                    </div>
                </div>
            </div>
        }

    }
    else
    {
        <a asp-controller="Personal" asp-action="Requests" class="btn btn-primary btn-lg btn-block">All of your friends are in the team! Check out your friend requests here.</a>
    }
</div>

@section Scripts {
    <script type="module">
        let inviteBtns = document.getElementsByClassName('sendInvite');
        let withdrawBtns = document.getElementsByClassName('withdrawInvite');

        [...withdrawBtns].forEach(x => {
            x.addEventListener('click' , (event) => {
                withdrawInvite(x.id, '@Model.Team.Id');
            });

            async function withdrawInvite(userId, teamId) {
                const response = await fetch('/api/teams/withdrawInvite', {
                    method: 'post',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ TeamId: teamId, UserId: userId})
                });

                if (response.ok) {
                    x.parentElement.querySelector('.sendInvite').disabled = false;
                    x.disabled = true;
                }
            }
        });

        [...inviteBtns].forEach(x => {
            x.addEventListener('click' , (event) => {
                sendInvite(x.id);
            });

            async function sendInvite(id) {
                const response = await fetch('/api/teams/inviteMember', {
                    method: 'post',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ TeamId: '@Model.Team.Id', UserId: id})
                });

                if (response.ok) {
                    x.parentElement.querySelector('.withdrawInvite').disabled = false;
                    x.disabled = true;
                }
            }
        });
    </script>
}