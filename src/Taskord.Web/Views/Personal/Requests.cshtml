@using Taskord.Data.Models.Enums
@using Taskord.Web.Models
@model RequestsViewModel

<h3 class="text-center" id="receivedFriendRequestsCount">Received Friend Requests: @Model.ReceivedRequests.Count()</h3>
<div class="row">
    @foreach (var user in Model.ReceivedRequests)
    {
        <div class="col-md-4">
            <div class="card mb-3">
                <img class="card-img-top" src="@user.ImagePath">
                <div class="card-body text-center">
                    <h5 class="card-title text-center">@user.Name</h5>
                    @*<a asp-controller="Personal" asp-action="AcceptRequest" asp-route-userId="@user.Id"
                    class="btn btn-success">Accept</a>
                    <a asp-controller="Personal" asp-action="DeclineRequest" asp-route-userId="@user.Id"
                    class="btn btn-danger">Decline</a>*@
                    <a id="@user.Id" class="btn btn-success acceptFriendBtn">Accept</a>
                    <a id="@user.Id" class="btn btn-danger declineFriendBtn">Decline</a>
                </div>
            </div>
        </div>
    }
</div>

<hr />

<h3 class="text-center" id="sentFriendRequestsCount">Sent Friend Requests: @Model.SentRequests.Count()</h3>
<div class="row">
    @foreach (var user in Model.SentRequests)
    {
        <div class="col-md-4">
            <div class="card mb-3">
                <img class="card-img-top" src="@user.ImagePath">
                <div class="card-body text-center">
                    <h5 class="card-title text-center">@user.Name</h5>
                    @*<a asp-controller="Personal" asp-action="WithdrawRequest" asp-route-userId="@user.Id"
                   class="btn btn-secondary">Withdraw</a>*@
                   <a id="@user.Id" class="btn btn-secondary withdrawFriendBtn">Withdraw</a>
                </div>
            </div>
        </div>
    }
</div>

<hr />

<h3 class="text-center" id="teamInviteCount">Received Team Invites: @Model.TeamInvites.Count()</h3>
<div class="row">
    @foreach (var invite in Model.TeamInvites)
    {
        <div class="col-md-4">
            <div class="card mb-3">
                <img class="card-img-top" src="@invite.Team.ImagePath">
                <div class="card-body text-center">
                    <h5 class="card-title text-center">Team Name: @invite.Team.Name</h5>
                    <h5 class="card-title text-center">Sender Name: @invite.Sender.Name</h5>
                    <a id="@invite.Id" class="btn btn-success acceptTeamInviteBtn">Accept</a>
                    <a id="@invite.Id" class="btn btn-danger declineTeamInviteBtn">Decline</a>
                </div>
            </div>
        </div>
    }
</div>

<hr />

@if (Model.ReceivedRequests.Count() == 0 && Model.SentRequests.Count() == 0 && Model.TeamInvites.Count() == 0)
{
    <a asp-controller="Personal" asp-action="Search" class="btn btn-primary btn-lg btn-block">Search for friends here</a>
}

@section Scripts{
<script type="module">
    let acceptInviteBtns = document.querySelectorAll('.acceptTeamInviteBtn');
    let declineInviteBtns = document.querySelectorAll('.declineTeamInviteBtn');

    let acceptFriendBtns = document.querySelectorAll('.acceptFriendBtn');
    let declineFriensBtns = document.querySelectorAll('.declineFriendBtn');

    let withdrawFriendBtns = document.querySelectorAll('.withdrawFriendBtn');

    [...acceptInviteBtns].forEach(x => {
        x.addEventListener('click', e => {
            respondToInvite(x.id, true, x, 'Received Team Invites', @Model.TeamInvites.Count());
        });
    });

    [...declineInviteBtns].forEach(x => {
        x.addEventListener('click', e => {
            respondToInvite(x.id, false, x, 'Received Team Invites', @Model.TeamInvites.Count());
        });
    });

    [...acceptFriendBtns].forEach(x => {
        x.addEventListener('click', e => {
            respondToRequest(x.id, true, x, 'Received Friend Requests', @Model.ReceivedRequests.Count());
        });
    });

    [...declineFriensBtns].forEach(x => {
        x.addEventListener('click', e => {
            respondToRequest(x.id, false, x, 'Received Friend Requests', @Model.ReceivedRequests.Count());
        });
    });

    [...withdrawFriendBtns].forEach(x => {
        x.addEventListener('click', e => {
            withdrawRequest(x.id, x, 'Sent Friend Requests', @Model.SentRequests.Count());
        });
    });


    async function respondToInvite(id, state, btn, str, count) {
        const response = await fetch('/api/teams/respondToInvite', {
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ TeamInviteId: id, IsAccepted: state })
        });
        
        editDOM('teamInviteCount', response, btn, str, getTeamInvites);
    }

    async function respondToRequest(id, state, btn, str, count) {
        const response = await fetch('/api/me/respondToFriendRequest', {
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ UserId: id, IsAccepted: state })
        });

        editDOM('receivedFriendRequestsCount', response, btn, str, getReceivedRequests);
    }

    async function withdrawRequest(id, btn, str, count) {
        const response = await fetch('/api/me/withdrawFriendRequest', {
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ UserId: id })
        });

        editDOM('sentFriendRequestsCount', response, btn, str, getSentRequests);
    }

    async function editDOM(countId, response, btn, str, count){
        if (response.ok) {
            btn.parentElement.parentElement.parentElement.remove();
            let countLabel = document.getElementById(countId);

            let number = Number(await count());

            countLabel.textContent = `${str}: ${number}`;
        }
    }

    async function getReceivedRequests() {
        const response = await fetch('/api/me/receivedRequestsCount', {
            method: 'get',
        });

        let result = await response.text();
        console.log(result);

        return result;
    }

    async function getSentRequests() {
        const response = await fetch('/api/me/sentRequestsCount', {
            method: 'get',
        });

        let result = await response.text();
        console.log(result);

        return result;
    }

    async function getTeamInvites() {
        const response = await fetch('/api/teams/teamInvitesCount', {
            method: 'get',
        });

        let result = await response.text();
        console.log(result);

        return result;
    }
</script>
}